package com.isgk.tfcforgingtip;

import java.util.Arrays;
import java.util.List;

import org.lwjgl.opengl.GL11;

import com.bioxx.tfc.GUI.GuiAnvil;
import com.bioxx.tfc.api.Crafting.AnvilManager;
import com.bioxx.tfc.api.Crafting.PlanRecipe;
import com.bioxx.tfc.api.Enums.RuleEnum;
import com.google.common.collect.Lists;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.client.renderer.Tessellator;
import net.minecraftforge.client.event.GuiScreenEvent.DrawScreenEvent;
import net.minecraftforge.common.MinecraftForge;

@Mod(modid = TFCForgingTip.MODID, version = TFCForgingTip.VERSION, dependencies = "required-after:terrafirmacraft@[0.79.36,)")
public class TFCForgingTip {

	public static final String MODID = "tfcforgingtip";
	public static final String VERSION = "@VERSION@";

	@EventHandler
	public void init(FMLInitializationEvent event) {
		MinecraftForge.EVENT_BUS.register(new DrawScreen());
	}

	public static class DrawScreen {

		private static int[] operateToDistance = { -3, -6, -9, -15, 2, 7, 13, 16 };
		private static int[][] distanceToOperates = { { 0, 0, 0, 10, 0, 0, 0, 0 }, { 0, 1, 0, 10, 0, 1, 0, 0 },
				{ 0, 0, 0, 10, 1, 0, 0, 0 }, { 1, 0, 1, 9, 0, 0, 0, 0 }, { 1, 0, 0, 10, 0, 1, 0, 0 },
				{ 1, 0, 1, 9, 1, 0, 0, 0 }, { 0, 0, 1, 9, 0, 0, 0, 0 }, { 0, 0, 0, 10, 0, 1, 0, 0 },
				{ 0, 0, 1, 9, 1, 0, 0, 0 }, { 0, 1, 0, 9, 0, 0, 0, 0 }, { 1, 0, 1, 9, 0, 1, 0, 0 },
				{ 0, 1, 0, 9, 1, 0, 0, 0 }, { 1, 0, 0, 9, 0, 0, 0, 0 }, { 0, 0, 1, 9, 0, 1, 0, 0 },
				{ 1, 0, 0, 9, 1, 0, 0, 0 }, { 0, 0, 0, 9, 0, 0, 0, 0 }, { 0, 1, 0, 9, 0, 1, 0, 0 },
				{ 0, 0, 0, 9, 1, 0, 0, 0 }, { 1, 0, 1, 8, 0, 0, 0, 0 }, { 1, 0, 0, 9, 0, 1, 0, 0 },
				{ 1, 0, 1, 8, 1, 0, 0, 0 }, { 0, 0, 1, 8, 0, 0, 0, 0 }, { 0, 0, 0, 9, 0, 1, 0, 0 },
				{ 0, 0, 1, 8, 1, 0, 0, 0 }, { 0, 1, 0, 8, 0, 0, 0, 0 }, { 1, 0, 1, 8, 0, 1, 0, 0 },
				{ 0, 1, 0, 8, 1, 0, 0, 0 }, { 1, 0, 0, 8, 0, 0, 0, 0 }, { 0, 0, 1, 8, 0, 1, 0, 0 },
				{ 1, 0, 0, 8, 1, 0, 0, 0 }, { 0, 0, 0, 8, 0, 0, 0, 0 }, { 0, 1, 0, 8, 0, 1, 0, 0 },
				{ 0, 0, 0, 8, 1, 0, 0, 0 }, { 1, 0, 1, 7, 0, 0, 0, 0 }, { 1, 0, 0, 8, 0, 1, 0, 0 },
				{ 1, 0, 1, 7, 1, 0, 0, 0 }, { 0, 0, 1, 7, 0, 0, 0, 0 }, { 0, 0, 0, 8, 0, 1, 0, 0 },
				{ 0, 0, 1, 7, 1, 0, 0, 0 }, { 0, 1, 0, 7, 0, 0, 0, 0 }, { 1, 0, 1, 7, 0, 1, 0, 0 },
				{ 0, 1, 0, 7, 1, 0, 0, 0 }, { 1, 0, 0, 7, 0, 0, 0, 0 }, { 0, 0, 1, 7, 0, 1, 0, 0 },
				{ 1, 0, 0, 7, 1, 0, 0, 0 }, { 0, 0, 0, 7, 0, 0, 0, 0 }, { 0, 1, 0, 7, 0, 1, 0, 0 },
				{ 0, 0, 0, 7, 1, 0, 0, 0 }, { 1, 0, 1, 6, 0, 0, 0, 0 }, { 1, 0, 0, 7, 0, 1, 0, 0 },
				{ 1, 0, 1, 6, 1, 0, 0, 0 }, { 0, 0, 1, 6, 0, 0, 0, 0 }, { 0, 0, 0, 7, 0, 1, 0, 0 },
				{ 0, 0, 1, 6, 1, 0, 0, 0 }, { 0, 1, 0, 6, 0, 0, 0, 0 }, { 1, 0, 1, 6, 0, 1, 0, 0 },
				{ 0, 1, 0, 6, 1, 0, 0, 0 }, { 1, 0, 0, 6, 0, 0, 0, 0 }, { 0, 0, 1, 6, 0, 1, 0, 0 },
				{ 1, 0, 0, 6, 1, 0, 0, 0 }, { 0, 0, 0, 6, 0, 0, 0, 0 }, { 0, 1, 0, 6, 0, 1, 0, 0 },
				{ 0, 0, 0, 6, 1, 0, 0, 0 }, { 1, 0, 1, 5, 0, 0, 0, 0 }, { 1, 0, 0, 6, 0, 1, 0, 0 },
				{ 1, 0, 1, 5, 1, 0, 0, 0 }, { 0, 0, 1, 5, 0, 0, 0, 0 }, { 0, 0, 0, 6, 0, 1, 0, 0 },
				{ 0, 0, 1, 5, 1, 0, 0, 0 }, { 0, 1, 0, 5, 0, 0, 0, 0 }, { 1, 0, 1, 5, 0, 1, 0, 0 },
				{ 0, 1, 0, 5, 1, 0, 0, 0 }, { 1, 0, 0, 5, 0, 0, 0, 0 }, { 0, 0, 1, 5, 0, 1, 0, 0 },
				{ 1, 0, 0, 5, 1, 0, 0, 0 }, { 0, 0, 0, 5, 0, 0, 0, 0 }, { 0, 1, 0, 5, 0, 1, 0, 0 },
				{ 0, 0, 0, 5, 1, 0, 0, 0 }, { 1, 0, 1, 4, 0, 0, 0, 0 }, { 1, 0, 0, 5, 0, 1, 0, 0 },
				{ 1, 0, 1, 4, 1, 0, 0, 0 }, { 0, 0, 1, 4, 0, 0, 0, 0 }, { 0, 0, 0, 5, 0, 1, 0, 0 },
				{ 0, 0, 1, 4, 1, 0, 0, 0 }, { 0, 1, 0, 4, 0, 0, 0, 0 }, { 1, 0, 1, 4, 0, 1, 0, 0 },
				{ 0, 1, 0, 4, 1, 0, 0, 0 }, { 1, 0, 0, 4, 0, 0, 0, 0 }, { 0, 0, 1, 4, 0, 1, 0, 0 },
				{ 1, 0, 0, 4, 1, 0, 0, 0 }, { 0, 0, 0, 4, 0, 0, 0, 0 }, { 0, 1, 0, 4, 0, 1, 0, 0 },
				{ 0, 0, 0, 4, 1, 0, 0, 0 }, { 1, 0, 1, 3, 0, 0, 0, 0 }, { 1, 0, 0, 4, 0, 1, 0, 0 },
				{ 1, 0, 1, 3, 1, 0, 0, 0 }, { 0, 0, 1, 3, 0, 0, 0, 0 }, { 0, 0, 0, 4, 0, 1, 0, 0 },
				{ 0, 0, 1, 3, 1, 0, 0, 0 }, { 0, 1, 0, 3, 0, 0, 0, 0 }, { 1, 0, 1, 3, 0, 1, 0, 0 },
				{ 0, 1, 0, 3, 1, 0, 0, 0 }, { 1, 0, 0, 3, 0, 0, 0, 0 }, { 0, 0, 1, 3, 0, 1, 0, 0 },
				{ 1, 0, 0, 3, 1, 0, 0, 0 }, { 0, 0, 0, 3, 0, 0, 0, 0 }, { 0, 1, 0, 3, 0, 1, 0, 0 },
				{ 0, 0, 0, 3, 1, 0, 0, 0 }, { 1, 0, 1, 2, 0, 0, 0, 0 }, { 1, 0, 0, 3, 0, 1, 0, 0 },
				{ 1, 0, 1, 2, 1, 0, 0, 0 }, { 0, 0, 1, 2, 0, 0, 0, 0 }, { 0, 0, 0, 3, 0, 1, 0, 0 },
				{ 0, 0, 1, 2, 1, 0, 0, 0 }, { 0, 1, 0, 2, 0, 0, 0, 0 }, { 1, 0, 1, 2, 0, 1, 0, 0 },
				{ 0, 1, 0, 2, 1, 0, 0, 0 }, { 1, 0, 0, 2, 0, 0, 0, 0 }, { 0, 0, 1, 2, 0, 1, 0, 0 },
				{ 1, 0, 0, 2, 1, 0, 0, 0 }, { 0, 0, 0, 2, 0, 0, 0, 0 }, { 0, 1, 0, 2, 0, 1, 0, 0 },
				{ 0, 0, 0, 2, 1, 0, 0, 0 }, { 1, 0, 1, 1, 0, 0, 0, 0 }, { 1, 0, 0, 2, 0, 1, 0, 0 },
				{ 1, 0, 1, 1, 1, 0, 0, 0 }, { 0, 0, 1, 1, 0, 0, 0, 0 }, { 0, 0, 0, 2, 0, 1, 0, 0 },
				{ 0, 0, 1, 1, 1, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0 }, { 1, 0, 1, 1, 0, 1, 0, 0 },
				{ 0, 1, 0, 1, 1, 0, 0, 0 }, { 1, 0, 0, 1, 0, 0, 0, 0 }, { 0, 0, 1, 1, 0, 1, 0, 0 },
				{ 1, 0, 0, 1, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 1, 0, 0 },
				{ 0, 0, 0, 1, 1, 0, 0, 0 }, { 1, 0, 1, 0, 0, 0, 0, 0 }, { 1, 0, 0, 1, 0, 1, 0, 0 },
				{ 1, 0, 1, 0, 1, 0, 0, 0 }, { 0, 0, 1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 1, 0, 1, 0, 0 },
				{ 0, 0, 1, 0, 1, 0, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0, 0 }, { 1, 0, 0, 1, 0, 0, 1, 0 },
				{ 0, 1, 0, 0, 1, 0, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 1, 0, 0, 1, 0, 0 },
				{ 1, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 0, 0, 1, 0, 0 },
				{ 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 1, 0, 0, 1, 1, 0, 0 }, { 1, 0, 0, 0, 0, 1, 0, 0 },
				{ 0, 0, 1, 0, 0, 2, 0, 0 }, { 1, 0, 0, 0, 1, 1, 0, 0 }, { 0, 0, 0, 0, 0, 1, 0, 0 },
				{ 0, 1, 0, 0, 0, 2, 0, 0 }, { 0, 0, 0, 0, 1, 1, 0, 0 }, { 1, 0, 0, 0, 0, 0, 1, 0 },
				{ 1, 0, 0, 0, 0, 2, 0, 0 }, { 1, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 1, 0 },
				{ 0, 0, 0, 0, 0, 2, 0, 0 }, { 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 1, 0, 0, 0, 0, 1, 1, 0 }, { 0, 0, 0, 0, 1, 0, 0, 1 }, { 1, 0, 0, 0, 1, 1, 1, 0 },
				{ 0, 0, 0, 0, 0, 1, 1, 0 }, { 0, 0, 0, 0, 0, 3, 0, 0 }, { 0, 0, 0, 0, 1, 1, 1, 0 },
				{ 0, 0, 0, 0, 0, 1, 0, 1 }, { 0, 0, 1, 0, 0, 1, 2, 0 }, { 0, 0, 0, 0, 1, 1, 0, 1 },
				{ 0, 0, 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 0, 2, 1, 0 }, { 0, 0, 0, 0, 1, 0, 2, 0 },
				{ 0, 0, 0, 0, 0, 0, 1, 1 }, { 0, 0, 0, 0, 0, 2, 0, 1 }, { 0, 0, 0, 0, 1, 0, 1, 1 },
				{ 0, 0, 0, 0, 0, 0, 0, 2 }, { 0, 0, 0, 0, 0, 1, 2, 0 }, { 0, 0, 0, 0, 1, 0, 0, 2 },
				{ 0, 0, 0, 0, 1, 1, 2, 0 }, { 0, 0, 0, 0, 0, 1, 1, 1 }, { 0, 0, 0, 0, 0, 3, 0, 1 },
				{ 0, 0, 0, 0, 1, 1, 1, 1 }, { 0, 0, 0, 0, 0, 1, 0, 2 }, { 0, 0, 0, 0, 0, 2, 2, 0 },
				{ 0, 0, 0, 0, 1, 1, 0, 2 }, { 0, 0, 0, 0, 0, 0, 2, 1 }, { 0, 0, 0, 0, 0, 2, 1, 1 },
				{ 0, 0, 0, 0, 1, 0, 2, 1 }, { 0, 0, 0, 0, 0, 0, 1, 2 }, { 0, 0, 0, 0, 0, 2, 0, 2 },
				{ 0, 0, 0, 0, 1, 0, 1, 2 }, { 0, 0, 0, 0, 0, 0, 0, 3 }, { 0, 0, 0, 0, 0, 1, 2, 1 },
				{ 0, 0, 0, 0, 1, 0, 0, 3 }, { 0, 0, 0, 0, 1, 1, 2, 1 }, { 0, 0, 0, 0, 0, 1, 1, 2 },
				{ 0, 0, 0, 0, 0, 3, 0, 2 }, { 0, 0, 0, 0, 1, 1, 1, 2 }, { 0, 0, 0, 0, 0, 1, 0, 3 },
				{ 0, 0, 0, 0, 0, 2, 2, 1 }, { 0, 0, 0, 0, 1, 1, 0, 3 }, { 0, 0, 0, 0, 0, 0, 2, 2 },
				{ 0, 0, 0, 0, 0, 2, 1, 2 }, { 0, 0, 0, 0, 1, 0, 2, 2 }, { 0, 0, 0, 0, 0, 0, 1, 3 },
				{ 0, 0, 0, 0, 0, 2, 0, 3 }, { 0, 0, 0, 0, 1, 0, 1, 3 }, { 0, 0, 0, 0, 0, 0, 0, 4 },
				{ 0, 0, 0, 0, 0, 1, 2, 2 }, { 0, 0, 0, 0, 1, 0, 0, 4 }, { 0, 0, 0, 0, 1, 1, 2, 2 },
				{ 0, 0, 0, 0, 0, 1, 1, 3 }, { 0, 0, 0, 0, 0, 3, 0, 3 }, { 0, 0, 0, 0, 1, 1, 1, 3 },
				{ 0, 0, 0, 0, 0, 1, 0, 4 }, { 0, 0, 0, 0, 0, 2, 2, 2 }, { 0, 0, 0, 0, 1, 1, 0, 4 },
				{ 0, 0, 0, 0, 0, 0, 2, 3 }, { 0, 0, 0, 0, 0, 2, 1, 3 }, { 0, 0, 0, 0, 1, 0, 2, 3 },
				{ 0, 0, 0, 0, 0, 0, 1, 4 }, { 0, 0, 0, 0, 0, 2, 0, 4 }, { 0, 0, 0, 0, 1, 0, 1, 4 },
				{ 0, 0, 0, 0, 0, 0, 0, 5 }, { 0, 0, 0, 0, 0, 1, 2, 3 }, { 0, 0, 0, 0, 1, 0, 0, 5 },
				{ 0, 0, 0, 0, 1, 1, 2, 3 }, { 0, 0, 0, 0, 0, 1, 1, 4 }, { 0, 0, 0, 0, 0, 3, 0, 4 },
				{ 0, 0, 0, 0, 1, 1, 1, 4 }, { 0, 0, 0, 0, 0, 1, 0, 5 }, { 0, 0, 0, 0, 0, 2, 2, 3 },
				{ 0, 0, 0, 0, 1, 1, 0, 5 }, { 0, 0, 0, 0, 0, 0, 2, 4 }, { 0, 0, 0, 0, 0, 2, 1, 4 },
				{ 0, 0, 0, 0, 1, 0, 2, 4 }, { 0, 0, 0, 0, 0, 0, 1, 5 }, { 0, 0, 0, 0, 0, 2, 0, 5 },
				{ 0, 0, 0, 0, 1, 0, 1, 5 }, { 0, 0, 0, 0, 0, 0, 0, 6 }, { 0, 0, 0, 0, 0, 1, 2, 4 },
				{ 0, 0, 0, 0, 1, 0, 0, 6 }, { 0, 0, 0, 0, 1, 1, 2, 4 }, { 0, 0, 0, 0, 0, 1, 1, 5 },
				{ 0, 0, 0, 0, 0, 3, 0, 5 }, { 0, 0, 0, 0, 1, 1, 1, 5 }, { 0, 0, 0, 0, 0, 1, 0, 6 },
				{ 0, 0, 0, 0, 0, 2, 2, 4 }, { 0, 0, 0, 0, 1, 1, 0, 6 }, { 0, 0, 0, 0, 0, 0, 2, 5 },
				{ 0, 0, 0, 0, 0, 2, 1, 5 }, { 0, 0, 0, 0, 1, 0, 2, 5 }, { 0, 0, 0, 0, 0, 0, 1, 6 },
				{ 0, 0, 0, 0, 0, 2, 0, 6 }, { 0, 0, 0, 0, 1, 0, 1, 6 }, { 0, 0, 0, 0, 0, 0, 0, 7 },
				{ 0, 0, 0, 0, 0, 1, 2, 5 }, { 0, 0, 0, 0, 1, 0, 0, 7 }, { 0, 0, 0, 0, 1, 1, 2, 5 },
				{ 0, 0, 0, 0, 0, 1, 1, 6 }, { 0, 0, 0, 0, 0, 3, 0, 6 }, { 0, 0, 0, 0, 1, 1, 1, 6 },
				{ 0, 0, 0, 0, 0, 1, 0, 7 }, { 0, 0, 0, 0, 0, 2, 2, 5 }, { 0, 0, 0, 0, 1, 1, 0, 7 },
				{ 0, 0, 0, 0, 0, 0, 2, 6 }, { 0, 0, 0, 0, 0, 2, 1, 6 }, { 0, 0, 0, 0, 1, 0, 2, 6 },
				{ 0, 0, 0, 0, 0, 0, 1, 7 }, { 0, 0, 0, 0, 0, 2, 0, 7 }, { 0, 0, 0, 0, 1, 0, 1, 7 },
				{ 0, 0, 0, 0, 0, 0, 0, 8 }, { 0, 0, 0, 0, 0, 1, 2, 6 }, { 0, 0, 0, 0, 1, 0, 0, 8 },
				{ 0, 0, 0, 0, 1, 1, 2, 6 }, { 0, 0, 0, 0, 0, 1, 1, 7 }, { 0, 0, 0, 0, 0, 3, 0, 7 },
				{ 0, 0, 0, 0, 1, 1, 1, 7 }, { 0, 0, 0, 0, 0, 1, 0, 8 }, { 0, 0, 0, 0, 0, 2, 2, 6 },
				{ 0, 0, 0, 0, 1, 1, 0, 8 }, { 0, 0, 0, 0, 0, 0, 2, 7 }, { 0, 0, 0, 0, 0, 2, 1, 7 },
				{ 0, 0, 0, 0, 1, 0, 2, 7 }, { 0, 0, 0, 0, 0, 0, 1, 8 }, { 0, 0, 0, 0, 0, 2, 0, 8 },
				{ 0, 0, 0, 0, 1, 0, 1, 8 }, { 0, 0, 0, 0, 0, 0, 0, 9 }, { 0, 0, 0, 0, 0, 1, 2, 7 },
				{ 0, 0, 0, 0, 1, 0, 0, 9 }, { 0, 0, 0, 0, 1, 1, 2, 7 }, { 0, 0, 0, 0, 0, 1, 1, 8 },
				{ 0, 0, 0, 0, 0, 3, 0, 8 }, { 0, 0, 0, 0, 1, 1, 1, 8 } };
		private static int[][] operateEnum = { { 0, 0, 0, 0, 0, 0, 9, 6, 3 }, { 0, 0, 0, 1, 0, 0, 12, 9, 6 },
				{ 0, 0, 0, 2, 0, 0, 15, 12, 9 }, { 1, 0, 0, 3, 0, 0, 21, 18, 15 }, { 3, 0, 0, 4, 0, 0, 4, 1, -2 },
				{ 4, 0, 0, 5, 0, 0, -1, -4, -7 }, { 5, 0, 0, 6, 0, 0, -7, -10, -13 },
				{ 6, 0, 0, 7, 0, 0, -10, -13, -16 }, { 0, 0, 0, 0, 1, 0, 12, 9, 3 }, { 0, 0, 0, 1, 1, 0, 15, 12, 6 },
				{ 0, 0, 0, 2, 1, 0, 18, 15, 9 }, { 1, 0, 0, 3, 1, 0, 24, 21, 15 }, { 3, 0, 0, 4, 1, 0, 7, 4, -2 },
				{ 4, 0, 0, 5, 1, 0, 2, -1, -7 }, { 5, 0, 0, 6, 1, 0, -4, -7, -13 }, { 6, 0, 0, 7, 1, 0, -7, -10, -16 },
				{ 0, 0, 0, 0, 2, 0, 15, 12, 3 }, { 0, 0, 0, 1, 2, 0, 18, 15, 6 }, { 0, 0, 0, 2, 2, 0, 21, 18, 9 },
				{ 1, 0, 0, 3, 2, 0, 27, 24, 15 }, { 3, 0, 0, 4, 2, 0, 10, 7, -2 }, { 4, 0, 0, 5, 2, 0, 5, 2, -7 },
				{ 5, 0, 0, 6, 2, 0, -1, -4, -13 }, { 6, 0, 0, 7, 2, 0, -4, -7, -16 }, { 0, 1, 0, 0, 3, 0, 21, 18, 3 },
				{ 0, 1, 0, 1, 3, 0, 24, 21, 6 }, { 0, 1, 0, 2, 3, 0, 27, 24, 9 }, { 1, 1, 0, 3, 3, 0, 33, 30, 15 },
				{ 3, 1, 0, 4, 3, 0, 16, 13, -2 }, { 4, 1, 0, 5, 3, 0, 11, 8, -7 }, { 5, 1, 0, 6, 3, 0, 5, 2, -13 },
				{ 6, 1, 0, 7, 3, 0, 2, -1, -16 }, { 0, 3, 0, 0, 4, 0, 4, 1, 3 }, { 0, 3, 0, 1, 4, 0, 7, 4, 6 },
				{ 0, 3, 0, 2, 4, 0, 10, 7, 9 }, { 1, 3, 0, 3, 4, 0, 16, 13, 15 }, { 3, 3, 0, 4, 4, 0, -1, -4, -2 },
				{ 4, 3, 0, 5, 4, 0, -6, -9, -7 }, { 5, 3, 0, 6, 4, 0, -12, -15, -13 },
				{ 6, 3, 0, 7, 4, 0, -15, -18, -16 }, { 0, 4, 0, 0, 5, 0, -1, -4, 3 }, { 0, 4, 0, 1, 5, 0, 2, -1, 6 },
				{ 0, 4, 0, 2, 5, 0, 5, 2, 9 }, { 1, 4, 0, 3, 5, 0, 11, 8, 15 }, { 3, 4, 0, 4, 5, 0, -6, -9, -2 },
				{ 4, 4, 0, 5, 5, 0, -11, -14, -7 }, { 5, 4, 0, 6, 5, 0, -17, -20, -13 },
				{ 6, 4, 0, 7, 5, 0, -20, -23, -16 }, { 0, 5, 0, 0, 6, 0, -7, -10, 3 }, { 0, 5, 0, 1, 6, 0, -4, -7, 6 },
				{ 0, 5, 0, 2, 6, 0, -1, -4, 9 }, { 1, 5, 0, 3, 6, 0, 5, 2, 15 }, { 3, 5, 0, 4, 6, 0, -12, -15, -2 },
				{ 4, 5, 0, 5, 6, 0, -17, -20, -7 }, { 5, 5, 0, 6, 6, 0, -23, -26, -13 },
				{ 6, 5, 0, 7, 6, 0, -26, -29, -16 }, { 0, 6, 0, 0, 7, 0, -10, -13, 3 },
				{ 0, 6, 0, 1, 7, 0, -7, -10, 6 }, { 0, 6, 0, 2, 7, 0, -4, -7, 9 }, { 1, 6, 0, 3, 7, 0, 2, -1, 15 },
				{ 3, 6, 0, 4, 7, 0, -15, -18, -2 }, { 4, 6, 0, 5, 7, 0, -20, -23, -7 },
				{ 5, 6, 0, 6, 7, 0, -26, -29, -13 }, { 6, 6, 0, 7, 7, 0, -29, -32, -16 },
				{ 0, 0, 0, 0, 0, 1, 12, 6, 3 }, { 0, 0, 0, 1, 0, 1, 15, 9, 6 }, { 0, 0, 0, 2, 0, 1, 18, 12, 9 },
				{ 1, 0, 0, 3, 0, 1, 24, 18, 15 }, { 3, 0, 0, 4, 0, 1, 7, 1, -2 }, { 4, 0, 0, 5, 0, 1, 2, -4, -7 },
				{ 5, 0, 0, 6, 0, 1, -4, -10, -13 }, { 6, 0, 0, 7, 0, 1, -7, -13, -16 }, { 0, 0, 0, 0, 1, 1, 15, 9, 3 },
				{ 0, 0, 0, 1, 1, 1, 18, 12, 6 }, { 0, 0, 0, 2, 1, 1, 21, 15, 9 }, { 1, 0, 0, 3, 1, 1, 27, 21, 15 },
				{ 3, 0, 0, 4, 1, 1, 10, 4, -2 }, { 4, 0, 0, 5, 1, 1, 5, -1, -7 }, { 5, 0, 0, 6, 1, 1, -1, -7, -13 },
				{ 6, 0, 0, 7, 1, 1, -4, -10, -16 }, { 0, 0, 0, 0, 2, 1, 18, 12, 3 }, { 0, 0, 0, 1, 2, 1, 21, 15, 6 },
				{ 0, 0, 0, 2, 2, 1, 24, 18, 9 }, { 1, 0, 0, 3, 2, 1, 30, 24, 15 }, { 3, 0, 0, 4, 2, 1, 13, 7, -2 },
				{ 4, 0, 0, 5, 2, 1, 8, 2, -7 }, { 5, 0, 0, 6, 2, 1, 2, -4, -13 }, { 6, 0, 0, 7, 2, 1, -1, -7, -16 },
				{ 0, 1, 0, 0, 3, 1, 24, 18, 3 }, { 0, 1, 0, 1, 3, 1, 27, 21, 6 }, { 0, 1, 0, 2, 3, 1, 30, 24, 9 },
				{ 1, 1, 0, 3, 3, 1, 36, 30, 15 }, { 3, 1, 0, 4, 3, 1, 19, 13, -2 }, { 4, 1, 0, 5, 3, 1, 14, 8, -7 },
				{ 5, 1, 0, 6, 3, 1, 8, 2, -13 }, { 6, 1, 0, 7, 3, 1, 5, -1, -16 }, { 0, 3, 0, 0, 4, 1, 7, 1, 3 },
				{ 0, 3, 0, 1, 4, 1, 10, 4, 6 }, { 0, 3, 0, 2, 4, 1, 13, 7, 9 }, { 1, 3, 0, 3, 4, 1, 19, 13, 15 },
				{ 3, 3, 0, 4, 4, 1, 2, -4, -2 }, { 4, 3, 0, 5, 4, 1, -3, -9, -7 }, { 5, 3, 0, 6, 4, 1, -9, -15, -13 },
				{ 6, 3, 0, 7, 4, 1, -12, -18, -16 }, { 0, 4, 0, 0, 5, 1, 2, -4, 3 }, { 0, 4, 0, 1, 5, 1, 5, -1, 6 },
				{ 0, 4, 0, 2, 5, 1, 8, 2, 9 }, { 1, 4, 0, 3, 5, 1, 14, 8, 15 }, { 3, 4, 0, 4, 5, 1, -3, -9, -2 },
				{ 4, 4, 0, 5, 5, 1, -8, -14, -7 }, { 5, 4, 0, 6, 5, 1, -14, -20, -13 },
				{ 6, 4, 0, 7, 5, 1, -17, -23, -16 }, { 0, 5, 0, 0, 6, 1, -4, -10, 3 }, { 0, 5, 0, 1, 6, 1, -1, -7, 6 },
				{ 0, 5, 0, 2, 6, 1, 2, -4, 9 }, { 1, 5, 0, 3, 6, 1, 8, 2, 15 }, { 3, 5, 0, 4, 6, 1, -9, -15, -2 },
				{ 4, 5, 0, 5, 6, 1, -14, -20, -7 }, { 5, 5, 0, 6, 6, 1, -20, -26, -13 },
				{ 6, 5, 0, 7, 6, 1, -23, -29, -16 }, { 0, 6, 0, 0, 7, 1, -7, -13, 3 }, { 0, 6, 0, 1, 7, 1, -4, -10, 6 },
				{ 0, 6, 0, 2, 7, 1, -1, -7, 9 }, { 1, 6, 0, 3, 7, 1, 5, -1, 15 }, { 3, 6, 0, 4, 7, 1, -12, -18, -2 },
				{ 4, 6, 0, 5, 7, 1, -17, -23, -7 }, { 5, 6, 0, 6, 7, 1, -23, -29, -13 },
				{ 6, 6, 0, 7, 7, 1, -26, -32, -16 }, { 0, 0, 0, 0, 0, 2, 15, 6, 3 }, { 0, 0, 0, 1, 0, 2, 18, 9, 6 },
				{ 0, 0, 0, 2, 0, 2, 21, 12, 9 }, { 1, 0, 0, 3, 0, 2, 27, 18, 15 }, { 3, 0, 0, 4, 0, 2, 10, 1, -2 },
				{ 4, 0, 0, 5, 0, 2, 5, -4, -7 }, { 5, 0, 0, 6, 0, 2, -1, -10, -13 }, { 6, 0, 0, 7, 0, 2, -4, -13, -16 },
				{ 0, 0, 0, 0, 1, 2, 18, 9, 3 }, { 0, 0, 0, 1, 1, 2, 21, 12, 6 }, { 0, 0, 0, 2, 1, 2, 24, 15, 9 },
				{ 1, 0, 0, 3, 1, 2, 30, 21, 15 }, { 3, 0, 0, 4, 1, 2, 13, 4, -2 }, { 4, 0, 0, 5, 1, 2, 8, -1, -7 },
				{ 5, 0, 0, 6, 1, 2, 2, -7, -13 }, { 6, 0, 0, 7, 1, 2, -1, -10, -16 }, { 0, 0, 0, 0, 2, 2, 21, 12, 3 },
				{ 0, 0, 0, 1, 2, 2, 24, 15, 6 }, { 0, 0, 0, 2, 2, 2, 27, 18, 9 }, { 1, 0, 0, 3, 2, 2, 33, 24, 15 },
				{ 3, 0, 0, 4, 2, 2, 16, 7, -2 }, { 4, 0, 0, 5, 2, 2, 11, 2, -7 }, { 5, 0, 0, 6, 2, 2, 5, -4, -13 },
				{ 6, 0, 0, 7, 2, 2, 2, -7, -16 }, { 0, 1, 0, 0, 3, 2, 27, 18, 3 }, { 0, 1, 0, 1, 3, 2, 30, 21, 6 },
				{ 0, 1, 0, 2, 3, 2, 33, 24, 9 }, { 1, 1, 0, 3, 3, 2, 39, 30, 15 }, { 3, 1, 0, 4, 3, 2, 22, 13, -2 },
				{ 4, 1, 0, 5, 3, 2, 17, 8, -7 }, { 5, 1, 0, 6, 3, 2, 11, 2, -13 }, { 6, 1, 0, 7, 3, 2, 8, -1, -16 },
				{ 0, 3, 0, 0, 4, 2, 10, 1, 3 }, { 0, 3, 0, 1, 4, 2, 13, 4, 6 }, { 0, 3, 0, 2, 4, 2, 16, 7, 9 },
				{ 1, 3, 0, 3, 4, 2, 22, 13, 15 }, { 3, 3, 0, 4, 4, 2, 5, -4, -2 }, { 4, 3, 0, 5, 4, 2, 0, -9, -7 },
				{ 5, 3, 0, 6, 4, 2, -6, -15, -13 }, { 6, 3, 0, 7, 4, 2, -9, -18, -16 }, { 0, 4, 0, 0, 5, 2, 5, -4, 3 },
				{ 0, 4, 0, 1, 5, 2, 8, -1, 6 }, { 0, 4, 0, 2, 5, 2, 11, 2, 9 }, { 1, 4, 0, 3, 5, 2, 17, 8, 15 },
				{ 3, 4, 0, 4, 5, 2, 0, -9, -2 }, { 4, 4, 0, 5, 5, 2, -5, -14, -7 }, { 5, 4, 0, 6, 5, 2, -11, -20, -13 },
				{ 6, 4, 0, 7, 5, 2, -14, -23, -16 }, { 0, 5, 0, 0, 6, 2, -1, -10, 3 }, { 0, 5, 0, 1, 6, 2, 2, -7, 6 },
				{ 0, 5, 0, 2, 6, 2, 5, -4, 9 }, { 1, 5, 0, 3, 6, 2, 11, 2, 15 }, { 3, 5, 0, 4, 6, 2, -6, -15, -2 },
				{ 4, 5, 0, 5, 6, 2, -11, -20, -7 }, { 5, 5, 0, 6, 6, 2, -17, -26, -13 },
				{ 6, 5, 0, 7, 6, 2, -20, -29, -16 }, { 0, 6, 0, 0, 7, 2, -4, -13, 3 }, { 0, 6, 0, 1, 7, 2, -1, -10, 6 },
				{ 0, 6, 0, 2, 7, 2, 2, -7, 9 }, { 1, 6, 0, 3, 7, 2, 8, -1, 15 }, { 3, 6, 0, 4, 7, 2, -9, -18, -2 },
				{ 4, 6, 0, 5, 7, 2, -14, -23, -7 }, { 5, 6, 0, 6, 7, 2, -20, -29, -13 },
				{ 6, 6, 0, 7, 7, 2, -23, -32, -16 }, { 0, 0, 1, 0, 0, 3, 21, 6, 3 }, { 0, 0, 1, 1, 0, 3, 24, 9, 6 },
				{ 0, 0, 1, 2, 0, 3, 27, 12, 9 }, { 1, 0, 1, 3, 0, 3, 33, 18, 15 }, { 3, 0, 1, 4, 0, 3, 16, 1, -2 },
				{ 4, 0, 1, 5, 0, 3, 11, -4, -7 }, { 5, 0, 1, 6, 0, 3, 5, -10, -13 }, { 6, 0, 1, 7, 0, 3, 2, -13, -16 },
				{ 0, 0, 1, 0, 1, 3, 24, 9, 3 }, { 0, 0, 1, 1, 1, 3, 27, 12, 6 }, { 0, 0, 1, 2, 1, 3, 30, 15, 9 },
				{ 1, 0, 1, 3, 1, 3, 36, 21, 15 }, { 3, 0, 1, 4, 1, 3, 19, 4, -2 }, { 4, 0, 1, 5, 1, 3, 14, -1, -7 },
				{ 5, 0, 1, 6, 1, 3, 8, -7, -13 }, { 6, 0, 1, 7, 1, 3, 5, -10, -16 }, { 0, 0, 1, 0, 2, 3, 27, 12, 3 },
				{ 0, 0, 1, 1, 2, 3, 30, 15, 6 }, { 0, 0, 1, 2, 2, 3, 33, 18, 9 }, { 1, 0, 1, 3, 2, 3, 39, 24, 15 },
				{ 3, 0, 1, 4, 2, 3, 22, 7, -2 }, { 4, 0, 1, 5, 2, 3, 17, 2, -7 }, { 5, 0, 1, 6, 2, 3, 11, -4, -13 },
				{ 6, 0, 1, 7, 2, 3, 8, -7, -16 }, { 0, 1, 1, 0, 3, 3, 33, 18, 3 }, { 0, 1, 1, 1, 3, 3, 36, 21, 6 },
				{ 0, 1, 1, 2, 3, 3, 39, 24, 9 }, { 1, 1, 1, 3, 3, 3, 45, 30, 15 }, { 3, 1, 1, 4, 3, 3, 28, 13, -2 },
				{ 4, 1, 1, 5, 3, 3, 23, 8, -7 }, { 5, 1, 1, 6, 3, 3, 17, 2, -13 }, { 6, 1, 1, 7, 3, 3, 14, -1, -16 },
				{ 0, 3, 1, 0, 4, 3, 16, 1, 3 }, { 0, 3, 1, 1, 4, 3, 19, 4, 6 }, { 0, 3, 1, 2, 4, 3, 22, 7, 9 },
				{ 1, 3, 1, 3, 4, 3, 28, 13, 15 }, { 3, 3, 1, 4, 4, 3, 11, -4, -2 }, { 4, 3, 1, 5, 4, 3, 6, -9, -7 },
				{ 5, 3, 1, 6, 4, 3, 0, -15, -13 }, { 6, 3, 1, 7, 4, 3, -3, -18, -16 }, { 0, 4, 1, 0, 5, 3, 11, -4, 3 },
				{ 0, 4, 1, 1, 5, 3, 14, -1, 6 }, { 0, 4, 1, 2, 5, 3, 17, 2, 9 }, { 1, 4, 1, 3, 5, 3, 23, 8, 15 },
				{ 3, 4, 1, 4, 5, 3, 6, -9, -2 }, { 4, 4, 1, 5, 5, 3, 1, -14, -7 }, { 5, 4, 1, 6, 5, 3, -5, -20, -13 },
				{ 6, 4, 1, 7, 5, 3, -8, -23, -16 }, { 0, 5, 1, 0, 6, 3, 5, -10, 3 }, { 0, 5, 1, 1, 6, 3, 8, -7, 6 },
				{ 0, 5, 1, 2, 6, 3, 11, -4, 9 }, { 1, 5, 1, 3, 6, 3, 17, 2, 15 }, { 3, 5, 1, 4, 6, 3, 0, -15, -2 },
				{ 4, 5, 1, 5, 6, 3, -5, -20, -7 }, { 5, 5, 1, 6, 6, 3, -11, -26, -13 },
				{ 6, 5, 1, 7, 6, 3, -14, -29, -16 }, { 0, 6, 1, 0, 7, 3, 2, -13, 3 }, { 0, 6, 1, 1, 7, 3, 5, -10, 6 },
				{ 0, 6, 1, 2, 7, 3, 8, -7, 9 }, { 1, 6, 1, 3, 7, 3, 14, -1, 15 }, { 3, 6, 1, 4, 7, 3, -3, -18, -2 },
				{ 4, 6, 1, 5, 7, 3, -8, -23, -7 }, { 5, 6, 1, 6, 7, 3, -14, -29, -13 },
				{ 6, 6, 1, 7, 7, 3, -17, -32, -16 }, { 0, 0, 3, 0, 0, 4, 4, 6, 3 }, { 0, 0, 3, 1, 0, 4, 7, 9, 6 },
				{ 0, 0, 3, 2, 0, 4, 10, 12, 9 }, { 1, 0, 3, 3, 0, 4, 16, 18, 15 }, { 3, 0, 3, 4, 0, 4, -1, 1, -2 },
				{ 4, 0, 3, 5, 0, 4, -6, -4, -7 }, { 5, 0, 3, 6, 0, 4, -12, -10, -13 },
				{ 6, 0, 3, 7, 0, 4, -15, -13, -16 }, { 0, 0, 3, 0, 1, 4, 7, 9, 3 }, { 0, 0, 3, 1, 1, 4, 10, 12, 6 },
				{ 0, 0, 3, 2, 1, 4, 13, 15, 9 }, { 1, 0, 3, 3, 1, 4, 19, 21, 15 }, { 3, 0, 3, 4, 1, 4, 2, 4, -2 },
				{ 4, 0, 3, 5, 1, 4, -3, -1, -7 }, { 5, 0, 3, 6, 1, 4, -9, -7, -13 },
				{ 6, 0, 3, 7, 1, 4, -12, -10, -16 }, { 0, 0, 3, 0, 2, 4, 10, 12, 3 }, { 0, 0, 3, 1, 2, 4, 13, 15, 6 },
				{ 0, 0, 3, 2, 2, 4, 16, 18, 9 }, { 1, 0, 3, 3, 2, 4, 22, 24, 15 }, { 3, 0, 3, 4, 2, 4, 5, 7, -2 },
				{ 4, 0, 3, 5, 2, 4, 0, 2, -7 }, { 5, 0, 3, 6, 2, 4, -6, -4, -13 }, { 6, 0, 3, 7, 2, 4, -9, -7, -16 },
				{ 0, 1, 3, 0, 3, 4, 16, 18, 3 }, { 0, 1, 3, 1, 3, 4, 19, 21, 6 }, { 0, 1, 3, 2, 3, 4, 22, 24, 9 },
				{ 1, 1, 3, 3, 3, 4, 28, 30, 15 }, { 3, 1, 3, 4, 3, 4, 11, 13, -2 }, { 4, 1, 3, 5, 3, 4, 6, 8, -7 },
				{ 5, 1, 3, 6, 3, 4, 0, 2, -13 }, { 6, 1, 3, 7, 3, 4, -3, -1, -16 }, { 0, 3, 3, 0, 4, 4, -1, 1, 3 },
				{ 0, 3, 3, 1, 4, 4, 2, 4, 6 }, { 0, 3, 3, 2, 4, 4, 5, 7, 9 }, { 1, 3, 3, 3, 4, 4, 11, 13, 15 },
				{ 3, 3, 3, 4, 4, 4, -6, -4, -2 }, { 4, 3, 3, 5, 4, 4, -11, -9, -7 },
				{ 5, 3, 3, 6, 4, 4, -17, -15, -13 }, { 6, 3, 3, 7, 4, 4, -20, -18, -16 },
				{ 0, 4, 3, 0, 5, 4, -6, -4, 3 }, { 0, 4, 3, 1, 5, 4, -3, -1, 6 }, { 0, 4, 3, 2, 5, 4, 0, 2, 9 },
				{ 1, 4, 3, 3, 5, 4, 6, 8, 15 }, { 3, 4, 3, 4, 5, 4, -11, -9, -2 }, { 4, 4, 3, 5, 5, 4, -16, -14, -7 },
				{ 5, 4, 3, 6, 5, 4, -22, -20, -13 }, { 6, 4, 3, 7, 5, 4, -25, -23, -16 },
				{ 0, 5, 3, 0, 6, 4, -12, -10, 3 }, { 0, 5, 3, 1, 6, 4, -9, -7, 6 }, { 0, 5, 3, 2, 6, 4, -6, -4, 9 },
				{ 1, 5, 3, 3, 6, 4, 0, 2, 15 }, { 3, 5, 3, 4, 6, 4, -17, -15, -2 }, { 4, 5, 3, 5, 6, 4, -22, -20, -7 },
				{ 5, 5, 3, 6, 6, 4, -28, -26, -13 }, { 6, 5, 3, 7, 6, 4, -31, -29, -16 },
				{ 0, 6, 3, 0, 7, 4, -15, -13, 3 }, { 0, 6, 3, 1, 7, 4, -12, -10, 6 }, { 0, 6, 3, 2, 7, 4, -9, -7, 9 },
				{ 1, 6, 3, 3, 7, 4, -3, -1, 15 }, { 3, 6, 3, 4, 7, 4, -20, -18, -2 },
				{ 4, 6, 3, 5, 7, 4, -25, -23, -7 }, { 5, 6, 3, 6, 7, 4, -31, -29, -13 },
				{ 6, 6, 3, 7, 7, 4, -34, -32, -16 }, { 0, 0, 4, 0, 0, 5, -1, 6, 3 }, { 0, 0, 4, 1, 0, 5, 2, 9, 6 },
				{ 0, 0, 4, 2, 0, 5, 5, 12, 9 }, { 1, 0, 4, 3, 0, 5, 11, 18, 15 }, { 3, 0, 4, 4, 0, 5, -6, 1, -2 },
				{ 4, 0, 4, 5, 0, 5, -11, -4, -7 }, { 5, 0, 4, 6, 0, 5, -17, -10, -13 },
				{ 6, 0, 4, 7, 0, 5, -20, -13, -16 }, { 0, 0, 4, 0, 1, 5, 2, 9, 3 }, { 0, 0, 4, 1, 1, 5, 5, 12, 6 },
				{ 0, 0, 4, 2, 1, 5, 8, 15, 9 }, { 1, 0, 4, 3, 1, 5, 14, 21, 15 }, { 3, 0, 4, 4, 1, 5, -3, 4, -2 },
				{ 4, 0, 4, 5, 1, 5, -8, -1, -7 }, { 5, 0, 4, 6, 1, 5, -14, -7, -13 },
				{ 6, 0, 4, 7, 1, 5, -17, -10, -16 }, { 0, 0, 4, 0, 2, 5, 5, 12, 3 }, { 0, 0, 4, 1, 2, 5, 8, 15, 6 },
				{ 0, 0, 4, 2, 2, 5, 11, 18, 9 }, { 1, 0, 4, 3, 2, 5, 17, 24, 15 }, { 3, 0, 4, 4, 2, 5, 0, 7, -2 },
				{ 4, 0, 4, 5, 2, 5, -5, 2, -7 }, { 5, 0, 4, 6, 2, 5, -11, -4, -13 }, { 6, 0, 4, 7, 2, 5, -14, -7, -16 },
				{ 0, 1, 4, 0, 3, 5, 11, 18, 3 }, { 0, 1, 4, 1, 3, 5, 14, 21, 6 }, { 0, 1, 4, 2, 3, 5, 17, 24, 9 },
				{ 1, 1, 4, 3, 3, 5, 23, 30, 15 }, { 3, 1, 4, 4, 3, 5, 6, 13, -2 }, { 4, 1, 4, 5, 3, 5, 1, 8, -7 },
				{ 5, 1, 4, 6, 3, 5, -5, 2, -13 }, { 6, 1, 4, 7, 3, 5, -8, -1, -16 }, { 0, 3, 4, 0, 4, 5, -6, 1, 3 },
				{ 0, 3, 4, 1, 4, 5, -3, 4, 6 }, { 0, 3, 4, 2, 4, 5, 0, 7, 9 }, { 1, 3, 4, 3, 4, 5, 6, 13, 15 },
				{ 3, 3, 4, 4, 4, 5, -11, -4, -2 }, { 4, 3, 4, 5, 4, 5, -16, -9, -7 },
				{ 5, 3, 4, 6, 4, 5, -22, -15, -13 }, { 6, 3, 4, 7, 4, 5, -25, -18, -16 },
				{ 0, 4, 4, 0, 5, 5, -11, -4, 3 }, { 0, 4, 4, 1, 5, 5, -8, -1, 6 }, { 0, 4, 4, 2, 5, 5, -5, 2, 9 },
				{ 1, 4, 4, 3, 5, 5, 1, 8, 15 }, { 3, 4, 4, 4, 5, 5, -16, -9, -2 }, { 4, 4, 4, 5, 5, 5, -21, -14, -7 },
				{ 5, 4, 4, 6, 5, 5, -27, -20, -13 }, { 6, 4, 4, 7, 5, 5, -30, -23, -16 },
				{ 0, 5, 4, 0, 6, 5, -17, -10, 3 }, { 0, 5, 4, 1, 6, 5, -14, -7, 6 }, { 0, 5, 4, 2, 6, 5, -11, -4, 9 },
				{ 1, 5, 4, 3, 6, 5, -5, 2, 15 }, { 3, 5, 4, 4, 6, 5, -22, -15, -2 }, { 4, 5, 4, 5, 6, 5, -27, -20, -7 },
				{ 5, 5, 4, 6, 6, 5, -33, -26, -13 }, { 6, 5, 4, 7, 6, 5, -36, -29, -16 },
				{ 0, 6, 4, 0, 7, 5, -20, -13, 3 }, { 0, 6, 4, 1, 7, 5, -17, -10, 6 }, { 0, 6, 4, 2, 7, 5, -14, -7, 9 },
				{ 1, 6, 4, 3, 7, 5, -8, -1, 15 }, { 3, 6, 4, 4, 7, 5, -25, -18, -2 },
				{ 4, 6, 4, 5, 7, 5, -30, -23, -7 }, { 5, 6, 4, 6, 7, 5, -36, -29, -13 },
				{ 6, 6, 4, 7, 7, 5, -39, -32, -16 }, { 0, 0, 5, 0, 0, 6, -7, 6, 3 }, { 0, 0, 5, 1, 0, 6, -4, 9, 6 },
				{ 0, 0, 5, 2, 0, 6, -1, 12, 9 }, { 1, 0, 5, 3, 0, 6, 5, 18, 15 }, { 3, 0, 5, 4, 0, 6, -12, 1, -2 },
				{ 4, 0, 5, 5, 0, 6, -17, -4, -7 }, { 5, 0, 5, 6, 0, 6, -23, -10, -13 },
				{ 6, 0, 5, 7, 0, 6, -26, -13, -16 }, { 0, 0, 5, 0, 1, 6, -4, 9, 3 }, { 0, 0, 5, 1, 1, 6, -1, 12, 6 },
				{ 0, 0, 5, 2, 1, 6, 2, 15, 9 }, { 1, 0, 5, 3, 1, 6, 8, 21, 15 }, { 3, 0, 5, 4, 1, 6, -9, 4, -2 },
				{ 4, 0, 5, 5, 1, 6, -14, -1, -7 }, { 5, 0, 5, 6, 1, 6, -20, -7, -13 },
				{ 6, 0, 5, 7, 1, 6, -23, -10, -16 }, { 0, 0, 5, 0, 2, 6, -1, 12, 3 }, { 0, 0, 5, 1, 2, 6, 2, 15, 6 },
				{ 0, 0, 5, 2, 2, 6, 5, 18, 9 }, { 1, 0, 5, 3, 2, 6, 11, 24, 15 }, { 3, 0, 5, 4, 2, 6, -6, 7, -2 },
				{ 4, 0, 5, 5, 2, 6, -11, 2, -7 }, { 5, 0, 5, 6, 2, 6, -17, -4, -13 },
				{ 6, 0, 5, 7, 2, 6, -20, -7, -16 }, { 0, 1, 5, 0, 3, 6, 5, 18, 3 }, { 0, 1, 5, 1, 3, 6, 8, 21, 6 },
				{ 0, 1, 5, 2, 3, 6, 11, 24, 9 }, { 1, 1, 5, 3, 3, 6, 17, 30, 15 }, { 3, 1, 5, 4, 3, 6, 0, 13, -2 },
				{ 4, 1, 5, 5, 3, 6, -5, 8, -7 }, { 5, 1, 5, 6, 3, 6, -11, 2, -13 }, { 6, 1, 5, 7, 3, 6, -14, -1, -16 },
				{ 0, 3, 5, 0, 4, 6, -12, 1, 3 }, { 0, 3, 5, 1, 4, 6, -9, 4, 6 }, { 0, 3, 5, 2, 4, 6, -6, 7, 9 },
				{ 1, 3, 5, 3, 4, 6, 0, 13, 15 }, { 3, 3, 5, 4, 4, 6, -17, -4, -2 }, { 4, 3, 5, 5, 4, 6, -22, -9, -7 },
				{ 5, 3, 5, 6, 4, 6, -28, -15, -13 }, { 6, 3, 5, 7, 4, 6, -31, -18, -16 },
				{ 0, 4, 5, 0, 5, 6, -17, -4, 3 }, { 0, 4, 5, 1, 5, 6, -14, -1, 6 }, { 0, 4, 5, 2, 5, 6, -11, 2, 9 },
				{ 1, 4, 5, 3, 5, 6, -5, 8, 15 }, { 3, 4, 5, 4, 5, 6, -22, -9, -2 }, { 4, 4, 5, 5, 5, 6, -27, -14, -7 },
				{ 5, 4, 5, 6, 5, 6, -33, -20, -13 }, { 6, 4, 5, 7, 5, 6, -36, -23, -16 },
				{ 0, 5, 5, 0, 6, 6, -23, -10, 3 }, { 0, 5, 5, 1, 6, 6, -20, -7, 6 }, { 0, 5, 5, 2, 6, 6, -17, -4, 9 },
				{ 1, 5, 5, 3, 6, 6, -11, 2, 15 }, { 3, 5, 5, 4, 6, 6, -28, -15, -2 },
				{ 4, 5, 5, 5, 6, 6, -33, -20, -7 }, { 5, 5, 5, 6, 6, 6, -39, -26, -13 },
				{ 6, 5, 5, 7, 6, 6, -42, -29, -16 }, { 0, 6, 5, 0, 7, 6, -26, -13, 3 },
				{ 0, 6, 5, 1, 7, 6, -23, -10, 6 }, { 0, 6, 5, 2, 7, 6, -20, -7, 9 }, { 1, 6, 5, 3, 7, 6, -14, -1, 15 },
				{ 3, 6, 5, 4, 7, 6, -31, -18, -2 }, { 4, 6, 5, 5, 7, 6, -36, -23, -7 },
				{ 5, 6, 5, 6, 7, 6, -42, -29, -13 }, { 6, 6, 5, 7, 7, 6, -45, -32, -16 },
				{ 0, 0, 6, 0, 0, 7, -10, 6, 3 }, { 0, 0, 6, 1, 0, 7, -7, 9, 6 }, { 0, 0, 6, 2, 0, 7, -4, 12, 9 },
				{ 1, 0, 6, 3, 0, 7, 2, 18, 15 }, { 3, 0, 6, 4, 0, 7, -15, 1, -2 }, { 4, 0, 6, 5, 0, 7, -20, -4, -7 },
				{ 5, 0, 6, 6, 0, 7, -26, -10, -13 }, { 6, 0, 6, 7, 0, 7, -29, -13, -16 },
				{ 0, 0, 6, 0, 1, 7, -7, 9, 3 }, { 0, 0, 6, 1, 1, 7, -4, 12, 6 }, { 0, 0, 6, 2, 1, 7, -1, 15, 9 },
				{ 1, 0, 6, 3, 1, 7, 5, 21, 15 }, { 3, 0, 6, 4, 1, 7, -12, 4, -2 }, { 4, 0, 6, 5, 1, 7, -17, -1, -7 },
				{ 5, 0, 6, 6, 1, 7, -23, -7, -13 }, { 6, 0, 6, 7, 1, 7, -26, -10, -16 },
				{ 0, 0, 6, 0, 2, 7, -4, 12, 3 }, { 0, 0, 6, 1, 2, 7, -1, 15, 6 }, { 0, 0, 6, 2, 2, 7, 2, 18, 9 },
				{ 1, 0, 6, 3, 2, 7, 8, 24, 15 }, { 3, 0, 6, 4, 2, 7, -9, 7, -2 }, { 4, 0, 6, 5, 2, 7, -14, 2, -7 },
				{ 5, 0, 6, 6, 2, 7, -20, -4, -13 }, { 6, 0, 6, 7, 2, 7, -23, -7, -16 }, { 0, 1, 6, 0, 3, 7, 2, 18, 3 },
				{ 0, 1, 6, 1, 3, 7, 5, 21, 6 }, { 0, 1, 6, 2, 3, 7, 8, 24, 9 }, { 1, 1, 6, 3, 3, 7, 14, 30, 15 },
				{ 3, 1, 6, 4, 3, 7, -3, 13, -2 }, { 4, 1, 6, 5, 3, 7, -8, 8, -7 }, { 5, 1, 6, 6, 3, 7, -14, 2, -13 },
				{ 6, 1, 6, 7, 3, 7, -17, -1, -16 }, { 0, 3, 6, 0, 4, 7, -15, 1, 3 }, { 0, 3, 6, 1, 4, 7, -12, 4, 6 },
				{ 0, 3, 6, 2, 4, 7, -9, 7, 9 }, { 1, 3, 6, 3, 4, 7, -3, 13, 15 }, { 3, 3, 6, 4, 4, 7, -20, -4, -2 },
				{ 4, 3, 6, 5, 4, 7, -25, -9, -7 }, { 5, 3, 6, 6, 4, 7, -31, -15, -13 },
				{ 6, 3, 6, 7, 4, 7, -34, -18, -16 }, { 0, 4, 6, 0, 5, 7, -20, -4, 3 }, { 0, 4, 6, 1, 5, 7, -17, -1, 6 },
				{ 0, 4, 6, 2, 5, 7, -14, 2, 9 }, { 1, 4, 6, 3, 5, 7, -8, 8, 15 }, { 3, 4, 6, 4, 5, 7, -25, -9, -2 },
				{ 4, 4, 6, 5, 5, 7, -30, -14, -7 }, { 5, 4, 6, 6, 5, 7, -36, -20, -13 },
				{ 6, 4, 6, 7, 5, 7, -39, -23, -16 }, { 0, 5, 6, 0, 6, 7, -26, -10, 3 },
				{ 0, 5, 6, 1, 6, 7, -23, -7, 6 }, { 0, 5, 6, 2, 6, 7, -20, -4, 9 }, { 1, 5, 6, 3, 6, 7, -14, 2, 15 },
				{ 3, 5, 6, 4, 6, 7, -31, -15, -2 }, { 4, 5, 6, 5, 6, 7, -36, -20, -7 },
				{ 5, 5, 6, 6, 6, 7, -42, -26, -13 }, { 6, 5, 6, 7, 6, 7, -45, -29, -16 },
				{ 0, 6, 6, 0, 7, 7, -29, -13, 3 }, { 0, 6, 6, 1, 7, 7, -26, -10, 6 }, { 0, 6, 6, 2, 7, 7, -23, -7, 9 },
				{ 1, 6, 6, 3, 7, 7, -17, -1, 15 }, { 3, 6, 6, 4, 7, 7, -34, -18, -2 },
				{ 4, 6, 6, 5, 7, 7, -39, -23, -7 }, { 5, 6, 6, 6, 7, 7, -45, -29, -13 },
				{ 6, 6, 6, 7, 7, 7, -48, -32, -16 } };

		private int[] operateData;
		private int[] pointData;
		private int curStep;

		@SubscribeEvent
		public void onDrawScreen(DrawScreenEvent.Post event) {
			if (event.gui instanceof GuiAnvil) {
				GuiAnvil gui = (GuiAnvil) event.gui;
				int curPoint = gui.anvilTE.getItemCraftingValue();
				int targetPoint = gui.anvilTE.getCraftingValue();
				if (targetPoint == 0) {
					return;
				}
				boolean needBuild = false;
				if (pointData == null || curStep >= pointData.length) {
					needBuild = true;
				} else if (curStep == pointData.length - 1) {
					if (pointData[curStep] == curPoint) {
						return;
					} else {
						needBuild = true;
					}
				} else if (pointData[curStep + 1] == curPoint) {
					curStep++;
					if (curStep == pointData.length - 1 && pointData[curStep] == curPoint) {
						return;
					}
				} else if (pointData[curStep] != curPoint) {
					needBuild = true;
				}
				if (needBuild) {
					PlanRecipe p = AnvilManager.getInstance().getPlan(gui.anvilTE.craftingPlan);
					if (p == null || gui.anvilTE.workRecipe == null) {
						return;
					}
					RuleEnum[] rules = p.rules;
					List<int[]> acceptOperates = Lists.newArrayList();
					outfor: for (int[] operate : operateEnum) {
						for (RuleEnum rule : rules) {
							if (!rule.matches(operate, 0)) {
								continue outfor;
							}
						}
						acceptOperates.add(operate);
					}
					if (acceptOperates.isEmpty()) {
						return;
					}
					int[] itemRules = gui.anvilTE.getItemRules();
					boolean success = false;
					outfor: for (int[] operate : acceptOperates) {
						for (int i = 6; i < 9; i++) {
							if (operate[i] == curPoint - targetPoint) {
								boolean matche = true;
								for (int j = 0; j < i - 6; j++) {
									if (itemRules[j] != operate[j - i + 8]) {
										matche = false;
										break;
									}
								}
								if (matche) {
									operateData = new int[9 - i];
									pointData = new int[10 - i];
									pointData[operateData.length] = targetPoint;
									for (int j = 0; j < operateData.length; j++) {
										operateData[8 - i - j] = operate[i + j - 3];
										pointData[8 - i - j] = targetPoint + operate[8 - j];
									}
									success = true;
									break outfor;
								}
							}
						}
					}
					if (!success) {
						int minOperateCount = Integer.MAX_VALUE;
						int[] minOtherOperate = null;
						int[] minLastOperate = null;
						for (int[] operate : acceptOperates) {
							int[] otherOperate = distanceToOperates[targetPoint + operate[6] - curPoint + 150];
							int sum = 0;
							for (int i = 0; i < otherOperate.length; i++) {
								sum += otherOperate[i];
							}
							if (sum < minOperateCount) {
								minOperateCount = sum;
								minOtherOperate = otherOperate;
								minLastOperate = operate;
							}
						}
						operateData = new int[minOperateCount + 3];
						pointData = new int[minOperateCount + 4];
						pointData[minOperateCount + 3] = targetPoint;
						for (int i = 0; i < 3; i++) {
							operateData[minOperateCount + i] = minLastOperate[5 - i];
							pointData[minOperateCount + i] = targetPoint + minLastOperate[i + 6];
						}
						int index = minOperateCount - 1;
						while (index > 0) {
							for (int i = 0; i < 8; i++) {
								for (int j = 0; j < minOtherOperate[i]; j++) {
									operateData[index] = i;
									pointData[index] = pointData[index + 1] - operateToDistance[i];
									index--;
								}
							}
						}
					}
					curStep = 0;
					/*
					 * PlanRecipe p = AnvilManager.getInstance().getPlan(gui.anvilTE.craftingPlan);
					 * if (p == null || gui.anvilTE.workRecipe == null) { return; } RuleEnum[] rules
					 * = p.rules; int[] itemRules = gui.anvilTE.getItemRules(); int[] lastRules =
					 * new int[rules.length]; int[] lastPoints = new int[rules.length + 1];
					 * lastPoints[rules.length] = targetPoint; boolean[] matches = new
					 * boolean[rules.length + 1]; int unknowOperate = 0; for (int i = 0; i <
					 * rules.length; i++) { lastRules[rules.length - i - 1] = rules[i].Action;
					 * matches[rules.length - i] = true; for (int j = 0; j < rules.length - i; j++)
					 * { if (itemRules[j] != rules[i + j].Action || rules[i + j].Action != -1) {
					 * matches[rules.length - i] = false; break; } } switch (lastRules[rules.length
					 * - i - 1]) { case -1: unknowOperate++; break; case 0: targetPoint += 3; break;
					 * case 1: targetPoint += 15; break; case 3: targetPoint -= 2; break; case 4:
					 * targetPoint -= 7; break; case 5: targetPoint -= 13; break; case 6:
					 * targetPoint -= 16; break; } lastPoints[rules.length - i - 1] = targetPoint; }
					 * matches[0] = unknowOperate == 0; boolean success = false; for (int i =
					 * rules.length - 1; i >= 0; i--) { if (matches[i] && lastPoints[i] == curPoint)
					 * { operateData = new int[lastRules.length - i]; for (int j = 0; j <
					 * lastRules.length - i; j++) { switch (lastRules[j + i]) { case -1:
					 * operateData[j] = -1; break; case 0: operateData[j] = -2; break; case 1:
					 * operateData[j] = 3; break; case 3: case 4: case 5: case 6: operateData[j] =
					 * lastRules[j + i] + 1; break; } } pointData = Arrays.copyOfRange(lastPoints,
					 * i, lastPoints.length); success = true; } } if (!success) { int freeRuleIndex
					 * = lastRules.length - 1; int[] stepData =
					 * Arrays.copyOf(distanceToOperates[targetPoint - curPoint + 150],
					 * distanceToOperates[targetPoint - curPoint + 150].length); for (int i = 0; i <
					 * stepData.length; i++) { while (stepData[i] > 0) { while (freeRuleIndex >= 0
					 * && lastRules[freeRuleIndex] != -1) { freeRuleIndex--; } if (freeRuleIndex <
					 * 0) { break; } lastRules[freeRuleIndex] = i | 0x10000; stepData[i]--; } }
					 * int[] zeroOperate = new int[] { 2, 4, 5 }; int zeroOperateIndex = 0; for (;
					 * freeRuleIndex >= 0; freeRuleIndex--) { if (lastRules[freeRuleIndex] == -1) {
					 * lastRules[freeRuleIndex] = zeroOperate[zeroOperateIndex] | 0x10000; if
					 * (++zeroOperateIndex == zeroOperate.length) { zeroOperateIndex = 0; } } } int
					 * length = lastRules.length; length += (zeroOperate.length - zeroOperateIndex)
					 * % 3; for (int i = 0; i < stepData.length; i++) { length += stepData[i]; }
					 * operateData = new int[length]; pointData = new int[length + 1];
					 * pointData[length] = gui.anvilTE.getCraftingValue(); curStep = length - 1; for
					 * (int i = lastRules.length - 1; i >= 0; i--) { if ((lastRules[i] & 0x10000) !=
					 * 0) { operateData[curStep] = lastRules[i] & 0xFFFF; } else { switch
					 * (lastRules[i]) { case 0: operateData[curStep] = 0; break; case 1:
					 * operateData[curStep] = 3; break; case 3: case 4: case 5: case 6:
					 * operateData[curStep] = lastRules[i] + 1; break; } } pointData[curStep] =
					 * pointData[curStep + 1] - operateToDistance[operateData[curStep]]; curStep--;
					 * } if (zeroOperateIndex == 0) { for (int i = 0; i < stepData.length; i++) {
					 * while (stepData[i] > 0) { operateData[curStep] = i; pointData[curStep] =
					 * pointData[curStep + 1] - operateToDistance[operateData[curStep]]; curStep--;
					 * stepData[i]--; } } } else { for (int i = zeroOperateIndex; i <
					 * zeroOperate.length; i++) { operateData[curStep] = zeroOperate[i];
					 * pointData[curStep] = pointData[curStep + 1] -
					 * operateToDistance[operateData[curStep]]; curStep--; } } curStep = 0; }
					 */
				}
				int x = (gui.width - 208) / 2;
				int y = (gui.height - 204) / 2;
				switch (operateData[curStep]) {
				case 0:
				case 2:
					x += 69;
					break;
				case 1:
				case 3:
					x += 87;
					break;
				case 4:
				case 6:
					x += 105;
					break;
				case 5:
				case 7:
					x += 123;
					break;
				}
				switch (operateData[curStep]) {
				case 0:
				case 1:
				case 4:
				case 5:
					y += 64;
					break;
				case 2:
				case 3:
				case 6:
				case 7:
					y += 82;
					break;
				}
				GL11.glColor4f(0, 0, 1, 1);
				GL11.glDisable(GL11.GL_TEXTURE_2D);
				GL11.glDisable(GL11.GL_LIGHTING);
				Tessellator tessellator = Tessellator.instance;
				tessellator.startDrawing(GL11.GL_LINE_LOOP);
				tessellator.addVertex(x, y, 100);
				tessellator.addVertex(x, y + 16, 100);
				tessellator.addVertex(x + 16, y + 16, 100);
				tessellator.addVertex(x + 16, y, 100);
				tessellator.draw();
				GL11.glEnable(GL11.GL_LIGHTING);
				GL11.glEnable(GL11.GL_TEXTURE_2D);
				GL11.glColor4f(1, 1, 1, 1);
			} else {
				operateData = null;
				pointData = null;
			}
			/*
			 * if (event.gui instanceof GuiAnvil) { GuiAnvil gui = (GuiAnvil) event.gui;
			 * PlanRecipe p = AnvilManager.getInstance().getPlan(gui.anvilTE.craftingPlan);
			 * if (p == null || gui.anvilTE.workRecipe == null) { return; } RuleEnum[] rules
			 * = p.rules; int[] itemRules = gui.anvilTE.getItemRules(); int[] generatRules =
			 * new int[rules.length]; int[] generatPoints = new int[rules.length + 1]; int
			 * target = gui.anvilTE.getCraftingValue(); int cur =
			 * gui.anvilTE.getItemCraftingValue(); generatPoints[rules.length] = target;
			 * List<Integer> inRule = Lists.newArrayList(); inRule.add(0); int inPoint =
			 * rules.length; for (int i = 0; i < rules.length; i++) {
			 * generatRules[rules.length - i - 1] = rules[i].Action; boolean flag = true;
			 * for (int j = 0; j < rules.length - i; j++) { if (itemRules[j] != rules[i +
			 * j].Action && rules[i + j].Action != -1) { flag = false; break; } } if (flag)
			 * { inRule.add(rules.length - i); } switch (generatRules[rules.length - i - 1])
			 * { case -1: case 0: target += 3; break; case 1: target += 15; break; case 3:
			 * target -= 2; break; case 4: target -= 7; break; case 5: target -= 13; break;
			 * case 6: target -= 16; break; default: break; } generatPoints[rules.length - i
			 * - 1] = target; } int type = -1; for (int i : inRule) { if (i < rules.length
			 * && generatPoints[i] == cur) { switch (generatRules[i]) { case -1: case 0:
			 * type = 0; break; case 1: type = 3; break; case 3: type = 4; break; case 4:
			 * type = 5; break; case 5: type = 6; break; case 6: type = 7; break; } break; }
			 * } if (type == -1) { for (int i = data[target - cur + 150].length - 1; i >= 0;
			 * i--) { if (data[target - cur + 150][i] > 0) { type = i; break; } } } if (type
			 * != -1) { int x = (gui.width - 208) / 2; int y = (gui.height - 204) / 2;
			 * switch (type) { case 0: case 2: x += 69; break; case 1: case 3: x += 87;
			 * break; case 4: case 6: x += 105; break; case 5: case 7: x += 123; break; }
			 * switch (type) { case 0: case 1: case 4: case 5: y += 64; break; case 2: case
			 * 3: case 6: case 7: y += 82; break; } GL11.glColor4f(0, 0, 1, 1);
			 * GL11.glDisable(GL11.GL_TEXTURE_2D); GL11.glDisable(GL11.GL_LIGHTING);
			 * Tessellator tessellator = Tessellator.instance;
			 * tessellator.startDrawing(GL11.GL_LINE_LOOP); tessellator.addVertex(x, y,
			 * 100); tessellator.addVertex(x, y + 16, 100); tessellator.addVertex(x + 16, y
			 * + 16, 100); tessellator.addVertex(x + 16, y, 100); tessellator.draw();
			 * GL11.glEnable(GL11.GL_LIGHTING); GL11.glEnable(GL11.GL_TEXTURE_2D);
			 * GL11.glColor4f(1, 1, 1, 1); } }
			 */
		}

	}

}
